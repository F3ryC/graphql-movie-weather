// index.js
import express from 'express';
import { ApolloServer } from '@apollo/server';
import { expressMiddleware } from '@apollo/server/express4';
import cors from 'cors';

// --- Core GraphQL Components ---

// 1. The Schema (Type Definitions)
// This defines the "shape" of our API. We're defining:
// one possible query called "hello" which, when called, will return a String
// one type called "Movie" with fields "title" and "year"
const typeDefs = `#graphql
  # Define our new Movie type
  type Movie {
    title: String!    # Title is required
    year: String!     # Year is required
    director: String  # Director might be unknown sometimes, so it's nullable
    plot: String      # Plot might be short or missing
    poster: String    # URL to a poster image, might be missing
    actors: [String]  # An array of strings for actor names
  }

  # New Weather type definition
type Weather {
  city: String!
  temperature: Float! # Temperature can have decimal points
  conditions: String! # e.g., "Sunny", "Cloudy", "Rain"
}
  
  type Query {
    hello: String
    # A field to query for a single movie by its ID
    movie(id: ID!): Movie
    weather(city: String!): Weather # New field to query weather by city
  }
`;

// 2. The Resolvers
// This is an object that provides the actual functions for our schema fields.
// The structure of this object must match the structure of the schema.
const resolvers = {
  Query: {
    // This resolver function runs when the "hello" query is executed.
    hello: () => {
      return 'Hello from your GraphQL API!';
    },
    // New resolver for the "movie" query
    movie: (parent, args, context, info) => {
      // In a real application, you'd fetch this from a database or external API.
      // For now, we return a hardcoded movie object based on the 'id' argument.
      console.log(`Fetching movie with ID: ${args.id}`);
      return {
        title: `The Expanded Movie Title for ID: ${args.id}`,
        year: '2024',
        director: 'AI Assistant',
        plot: 'This is a thrilling plot generated by an AI to demonstrate GraphQL.',
        poster: 'https://via.placeholder.com/150/0000FF/FFFFFF?text=GraphQL+Movie', // A dummy image URL
        actors: ['Actor One', 'Actor Two', 'Actor Three'], // An array of actors
      };
    },
    // New resolver for the "weather" query
    weather: (parent, args, context, info) => {
      // For now, we'll return a hardcoded weather object
      // based on the 'city' argument.
      console.log(`Fetching weather for city: ${args.city}`);
      return {
        city: args.city, // Return the city that was requested
        temperature: 25.5, // Dummy temperature in Celsius
        conditions: 'Partly Cloudy', // Dummy conditions
      };
    },
// ...
  },
};

// --- Server Setup ---

const PORT = 4000;

/*
async function startServer() {
  // Create Express app
  const app = express();
  
  // Enable CORS
  app.use(cors());
  
  // Add JSON parsing middleware
  app.use(express.json());
  
  // Create Apollo Server
  const server = new ApolloServer({
    typeDefs,
    resolvers,
  });

  // Start the server
  // We must start the server before we can apply the middleware.
  await server.start();
  
  // 4. Apply the Apollo-Express middleware
  app.use(
    '/graphql',
    cors(),
    expressMiddleware(server, {
      context: async ({ req }) => ({
        resolvers,
      }),
    })
  );

  // 5. Start the Express server
  app.listen(PORT, () => {
    console.log(`ðŸš€ Server ready at http://localhost:${PORT}`);
    console.log(`ðŸš€ GraphQL endpoint ready at http://localhost:${PORT}/graphql`);
  });
}

// Handle unhandled promise rejections
process.on('unhandledRejection', (err) => {
  console.error('Unhandled Promise Rejection:', err);
  process.exit(1);
});

// Start the server
startServer().catch((error) => {
  console.error('Failed to start server:', error);
  process.exit(1);
});
*/


(async () => {
  // Make sure express middleware is applied globally & start before app.use('graphql')
  const app = express();
  app.use(express.json());

  // 3. Create an instance of ApolloServer
  // We pass it our schema (typeDefs) and our resolvers.
  const server = new ApolloServer({
    typeDefs,
    resolvers,
  });

  // We must start the server before we can apply the middleware.
  await server.start();

  // 4. Apply the Apollo-Express middleware
  app.use(
    '/graphql',
    cors(),
    expressMiddleware(server, {
      context: async ({ req }) => ({
        resolvers,
      }),
    })
  );

  // 5. Start the Express server
  app.listen(PORT, () => {
    console.log(`ðŸš€ Server ready at http://localhost:${PORT}`);
    console.log(`ðŸš€ GraphQL endpoint ready at http://localhost:${PORT}/graphql`);
  });
})();
